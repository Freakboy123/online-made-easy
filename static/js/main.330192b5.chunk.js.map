{"version":3,"sources":["Components/Meditation/meditationBackground.jpg","Components/Meditation/play-button.png","Components/Meditation/background_music.mp3","Components/Meditation/stop_button.png","Components/MeditationTimer.js","Components/MeditationWidget.js","Components/PomodoroWidget.js","Components/Quotes/inspirationalbackground.jpeg","Components/QuotesWidget.js","Components/ToDoWidget.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["MeditationTimer","props","stopInterval","stop","state","timeLeft","duration","this","interval","setInterval","setState","clearInterval","window","confirm","console","log","mins","Math","floor","toString","seconds","length","className","style","lineHeight","textAlign","fontSize","onClick","backgroundColor","border","cursor","src","stopButton","alt","height","React","Component","MeditationWidget","useState","Audio","Sound","audio","play","setPlay","setDuration","noise","setNoise","useEffect","addEventListener","removeEventListener","pause","currentTime","close","borderRadius","Background","position","top","left","color","type","min","max","pattern","value","onChange","e","target","display","alignItems","playButton","id","for","PomodoroWidget","cycles","timeState","prevProps","prevState","margin","marginTop","QuotesWidget","quotes","setQuotes","random","integer","fetch","then","response","json","data","backgroundImage","backgroundSize","fontStyle","fontWeight","ToDoWidget","list","setList","show","setShow","inputText","setInputText","currentList","actives","filter","item","status","completes","checkboxClicked","checkbox","name","checked","i","onSubmit","preventDefault","input","trim","checkIfValid","push","marginBottom","placeholder","map","task","App","openMeditation","setOpenMeditation","openPomodoro","setOpenPomodoro","openQuotes","setOpenQuotes","openToDo","setOpenToDo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.330192b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/meditationBackground.66c56280.jpg\";","export default __webpack_public_path__ + \"static/media/play-button.90ff39d9.png\";","export default __webpack_public_path__ + \"static/media/background_music.a78ba760.mp3\";","export default __webpack_public_path__ + \"static/media/stop_button.8de09fc4.png\";","import React from 'react'\nimport \"./meditation.css\"\nimport stopButton from \"./Meditation/stop_button.png\"\n\n\nclass MeditationTimer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {timeLeft: props.duration()*60}\n    }\n\n    componentDidMount(){ // Start the timer\n         this.interval = setInterval(()=>{\n            this.setState({timeLeft: this.state.timeLeft-1})\n        }, 1000\n        )\n    }\n\n    componentDidUpdate(){\n        if (this.state.timeLeft===-1){ // If the timer is finished\n            \n            clearInterval(this.interval)\n            window.confirm(\"Congratulations for finishing this session! You just earned 5 tokens!\");\n            this.props.stop() \n        }\n        console.log(\"OK\")\n    }\n\n    componentWillUnmount(){ // clearInterval (to prevent bugs)\n        clearInterval(this.interval)\n    }\n\n    stopInterval =()=>{ // If the meditation session is interrupted, the timer will diappear, and Meditation will display its menu\n        this.props.stop()\n    }\n    \n    render(){\n        let timeLeft = this.state.timeLeft\n        let mins = Math.floor(timeLeft/60).toString()\n        let seconds = (timeLeft - mins*60).toString()\n        if (mins.length===1){\n            mins = \"0\" + mins\n        }\n        if (seconds.length===1){\n            seconds = \"0\" + seconds\n        }\n        return(\n            <div className=\"timer\">\n                <div>\n                    <p>Close your eyes and focus on your breathing...</p>\n                    <p>Let go of any tension in your body and clear your mind.</p>\n                </div>\n                <div style={{lineHeight:\"0.01\", textAlign:\"center\"}} >\n                    <p style={{fontSize:\"60px\"}}>{mins}:{seconds}</p>\n                    <button onClick={()=> this.stopInterval()} style={{backgroundColor: \"transparent\", border: \"none\", cursor:\"pointer\"}}>\n                        <img src={stopButton} alt=\"stop_button\" height=\"30px\" />\n                        </button>\n                </div>\n            </div>\n        )}\n\n}\n\n\nexport default MeditationTimer","import React, {useEffect, useState} from 'react'\nimport \"./meditation.css\"\nimport Background from \"./Meditation/meditationBackground.jpg\"\nimport playButton from  \"./Meditation/play-button.png\"\nimport Sound from \"./Meditation/background_music.mp3\"\nimport MeditationTimer from './MeditationTimer'\nimport \"tachyons\"\n\nfunction MeditationWidget(props){\n    const [audio] = useState(new Audio(Sound))\n    const [play, setPlay] = useState(false)\n    const [duration, setDuration] = useState(3)\n    const [noise, setNoise] = useState(false)\n\n    useEffect(() => {\n\n        audio.addEventListener('ended', () => setPlay(false));\n    return () => {\n        audio.removeEventListener('ended', () => setPlay(false));\n        audio.pause()\n        audio.currentTime = 0\n\n    };\n        },\n    [])\n\n    useEffect(() => {\n        if (noise && play){\n            audio.play()\n}\n        else{\n            audio.pause()\n            audio.currentTime = 0\n        }\n    }, [play])\n\n    return(\n        <div className=\"meditationwidget shadow-5\">\n            <button className=\"close\" onClick={props.close}>X</button>\n            <img style={{borderRadius:\"30px\"}} height=\"300px\" src={Background} alt=\"background\"/>\n            <h2 style={{position:\"absolute\", top:\"0px\", left:\"30%\",color:\"#1d3340\", fontSize:\"40px\"}}>Meditation</h2>\n            {!play && <div className=\"duration\">\n                <p>Duration</p>\n                <input type=\"number\" min=\"3\" max=\"10\" pattern=\"[0-9]*\" value={duration} onChange={(e)=>setDuration(e.target.value)}/>\n                <p>MINUTES</p>\n            </div>\n            }\n\n            {!play ? <div style={{textAlign:\"center\"}}>\n                <button className=\"startButton\" onClick={()=>setPlay(true)}>\n                    <span style={{display: \"flex\", alignItems: \"center\"}}>\n                    <img src={playButton} alt=\"play button\" style={{height:\"70px\"}}/>\n                    <span style={{fontSize:\"50px\", color:\"white\"}}>\n                        START\n                    </span>                  \n                    </span>\n                </button>\n            </div> : <MeditationTimer duration={()=>{if(duration===0 || duration<3){ //Prevent unwanted inputs\n                                                        return 3\n                                                    }\n                                                    else if (duration > 100){\n                                                        return 10\n                                                    }\n                                                    else{\n                                                        return duration\n                                                    }\n                                                    }} stop={()=>{setPlay(false); setNoise(false)}}/>}\n\n            {!play &&<div style={{position:\"absolute\", top:\"80%\", left:\"35%\"}}>\n            <input type=\"checkbox\" id=\"check_sounds\" onChange={()=>setNoise(!noise)}/>\n                <label for=\"check_sounds\" style={{color:\"white\"}}> Meditate with Nature Sounds</label>\n            </div>}\n        </div>\n    )\n}\n\n\nexport default MeditationWidget","import React from 'react'\nimport \"./pomodoro.css\"\n\n\n\nclass PomodoroWidget extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            cycles: 0,\n            timeLeft: 25*60,\n            play: false, // false if paused\n            timeState: \"Work\" // Break or Work\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState){\n        //If user presses play\n        if (this.state.play===true && prevState.play===false){\n            this.interval = setInterval(()=>{\n                this.setState({timeLeft: this.state.timeLeft-1})\n            }, 1000);\n        }\n        //If user presses pause\n        else if (this.state.play===false && prevState.play===true){\n            clearInterval(this.interval)\n        }\n        \n        else if (this.state.timeLeft===0){\n            //When Work reaches 0:00\n            if (this.state.timeState===\"Work\"){\n                clearInterval(this.interval)\n                this.setState({timeLeft:5*60-1, timeState:\"Break\"})\n                this.interval = setInterval(()=>{\n                    this.setState({timeLeft: this.state.timeLeft-1})\n                }, 1000);\n            }\n            //When Break reaches 0:00\n            else if (this.state.timeState===\"Break\"){\n                clearInterval(this.interval)\n                this.setState({timeLeft:25*60-1, timeState:\"Work\", cycles: this.state.cycles + 1})\n                this.interval = setInterval(()=>{\n                    this.setState({timeLeft: this.state.timeLeft-1})\n                }, 1000);\n    \n            }\n        }\n\n    }\n\n\n\n\n    render(){\n        //Convert timeLeft (seconds) to readable time (mins, secs)\n        let timeLeft = this.state.timeLeft\n        let mins = Math.floor(timeLeft/60).toString()\n        let seconds = (timeLeft - mins*60).toString()\n        if (seconds.length===1){\n            seconds = \"0\" + seconds\n        }\n\n        return(\n            <div className=\"pomodorowidget shadow-5\">\n                <button className=\"close\" onClick={this.props.close}>X</button>\n                <div style={{position:\"relative\"}}>\n                    <h2 style={{color:\"#691e10\", fontSize:\"40px\", margin:\"20px\", marginTop:\"60px\", textAlign:\"center\"}}>Pomodoro Timer</h2>\n                </div>\n                <div style={{margin:\"20px\", display:\"inline-block\"}}>\n                    <p className=\"sectionTitle shadow-5\">Work</p>\n                    {this.state.timeState===\"Work\"?<p className=\"timers\">{mins}:{seconds}</p>:<p className=\"timers\">25:00</p> }\n                    <button className=\"controls\" onClick={()=>this.setState({play:true})}>Start</button>\n                    \n                </div>\n                <div style={{margin:\"20px\", display:\"inline-block\"}}>\n                <p className=\"sectionTitle shadow-5\">Cycles</p>\n                    <p className=\"timers\">{this.state.cycles}</p>\n                    <button className=\"controls\" onClick={()=>this.setState({play:false})}>Pause</button>\n                </div>\n                <div style={{margin:\"20px\", display:\"inline-block\"}}>\n                    <p  className=\"sectionTitle shadow-5\">Break</p>\n                    {this.state.timeState===\"Break\"?<p className=\"timers\">{mins}:{seconds}</p>:<p className=\"timers\">5:00</p> }\n                    <button className=\"controls\" onClick={()=>this.setState({play:false, timeLeft:25*60, timeState:\"Work\", cycles: 0})}>\n                        Reset\n                    </button>\n                    </div>\n                \n            </div>\n        )\n        }\n}\n\n\n\nexport default PomodoroWidget","export default __webpack_public_path__ + \"static/media/inspirationalbackground.363691af.jpeg\";","import React, {useEffect, useState} from \"react\";\nimport \"./inspirationalquotes.css\"\nimport Background from \"./Quotes/inspirationalbackground.jpeg\"\n\n\nfunction QuotesWidget(props){\n\n    const [quotes, setQuotes] = useState([]) // Container for the quotes fetched\n    const [integer] = useState(Math.floor(Math.random() * 1500)) // Using integer as an index to display one of the quotes\n\n    useEffect(()=>{ // Fetch quotes with an API\n        fetch(\"https://type.fit/api/quotes\")\n        .then(function(response) {\n            return response.json();\n        })\n        .then(function(data) {\n            setQuotes(data)\n  });\n    }, [])\n\n    useEffect(()=>{\n\n    }, [integer]\n    )\n\n\n    return (\n        \n        <div className=\"quoteswidget shadow-5\" style={{backgroundImage:`url(${Background})`, backgroundSize: '400px 300px'}}>\n                <button className=\"close\" onClick={props.close}>X</button>\n                <div style={{position:\"relative\", top: \"0%\"}}>\n                <h2 style={{color:\"#fffcde\", fontSize:\"30px\", margin:\"20px\", marginTop:\"60px\", textAlign:\"center\"}}>Inspirational Quotes</h2>\n                <div className=\"quote\">\n                    <p style={{fontStyle:\"italic\", fontWeight:\"bold\"}}>{quotes.length && quotes[integer][\"text\"]}</p>\n                    <p>{quotes.length && quotes[integer][\"author\"]}</p>\n                </div>\n                </div>\n        </div>\n    )\n\n}\n\n\n\nexport default QuotesWidget","import React, { useState} from \"react\";\nimport \"./ToDo.css\"\n\n\nfunction ToDoWidget(props){\n\n    const [list, setList] = useState([]) // Each element will be in the following object format: {name, status (active, completed)}\n    const [show, setShow] = useState(\"all\") // What is displayed: all, completed or active tasks\n    const [inputText, setInputText] = useState(\"\") // The \n    let currentList = [...list]\n\n    \n    let actives = list.filter(item=>item.status===\"active\") \n    let completes = list.filter(item=>item.status===\"completed\") \n\n    let listToDisplay = function(){ //Determines what to display in <ul> tags\n        if (show===\"all\"){\n            return list\n        }\n        else if (show===\"active\"){\n            return actives\n        }\n\n        else if (show===\"completed\"){\n            return completes\n        }\n    }\n\n    function checkIfValid(input){ // Prevent having two same elements as well as whitespace as an element\n        if (input.trim() === \"\"){\n            return false\n        }\n\n        for (let i = 0; i < currentList.length; i++){\n            if (currentList[i].name === input){\n                return false\n            }\n        }\n        return true\n\n    }\n\n    function checkboxClicked(checkbox, name){ // Change status of a task depending on whether checked or not\n        if (checkbox.target.checked){\n            for (let i = 0; i < currentList.length; i++){\n                if (currentList[i].name === name){\n                    currentList[i].status = \"completed\"\n                }\n            }\n        }\n\n        else if (!checkbox.target.checked){\n            for (let i = 0; i < currentList.length; i++){\n                if (currentList[i].name === name){\n                    currentList[i].status = \"active\"   \n            }\n        }\n    }\n    setList(currentList)\n}\n\n\n    return (\n        <div className=\"todowidget shadow-5\">\n        <button className=\"close\" onClick={props.close}>X</button>\n            <div style={{position:\"relative\", top: \"0%\"}}>\n                <h2 style={{color:\"#005e94\", fontSize:\"30px\", margin:\"20px\", marginTop:\"60px\", textAlign:\"center\"}}>To Do List</h2>\n            </div>\n            <div className=\"inputs\">\n                <form onSubmit={(e)=>{e.preventDefault(); \n                    if (checkIfValid(inputText)){\n                        currentList.push({name:inputText, status:\"active\"}); setList(currentList); setInputText(\"\")}}}>\n                    <input style={{borderRadius:\"20px\", border:\"none\", margin: \"6px\", marginBottom:\"30px\", marginTop:\"30px\", height:\"30px\"}} className=\"shadow-3\" type=\"text\" value={inputText} onChange={(e)=>setInputText(e.target.value)} placeholder=\"Enter a task...\"/>\n                    <input style={{backgroundColor:\"#629dfc\", border:\"solid 2px\", borderRadius:\"20px\"}} type=\"submit\" value=\"+\" />\n                </form>\n            </div>\n            <div className=\"input_buttons\">\n                <button className=\"i_button shadow-3\" onClick={()=> setShow(\"all\")}>All tasks</button>\n                <button className=\"i_button shadow-3\" onClick={()=> setShow(\"active\")}>Active tasks</button>\n                <button className=\"i_button shadow-3\" onClick={()=> setShow(\"completed\")}>Completed tasks</button>\n            </div>\n            <div><p>{actives.length} {actives.length !== 1 ? \" tasks\": \" task\"} remaining</p></div>\n            <hr></hr>\n            <div className=\"tasks\">\n            <ul>\n                {listToDisplay().map(task=>{\n                    if (task.status===\"completed\"){\n                        return (<li key={task.name} className=\"task\">\n                            <label>{task.name}</label> <input type=\"checkbox\" onChange={(e)=>{\n                                checkboxClicked(e, task.name)\n                        }} checked/></li>)}\n\n                    else{\n                        return (<li key={task.name} className=\"task\">\n                            <label>{task.name}</label> <input type=\"checkbox\" onChange={(e)=>{\n                                checkboxClicked(e, task.name)}} />\n                    </li>)}\n                    \n                })}\n            </ul>\n\n            </div>\n\n\n        </div>\n    )\n}\n\n\nexport default ToDoWidget","import './App.css';\nimport React, {useState} from 'react';\nimport MeditationWidget from '../Components/MeditationWidget';\nimport PomodoroWidget from '../Components/PomodoroWidget';\nimport QuotesWidget from \"../Components/QuotesWidget\"\nimport ToDoWidget from '../Components/ToDoWidget';\n\nfunction App() {\n  const [openMeditation, setOpenMeditation] = useState(true)\n  const [openPomodoro, setOpenPomodoro] = useState(true)\n  const [openQuotes, setOpenQuotes] = useState(true)\n  const [openToDo, setOpenToDo] = useState(true)\n\n  return (\n    <div className=\"App\">\n      <h1 style={{fontWeight:\"900\", fontSize:\"60px\"}}>Online Made Easy</h1>\n      <p style={{fontWeight:\"400\", fontSize:\"30px\"}}>Your Dashboard</p>\n      <hr></hr>\n      <div>\n      {openMeditation && <MeditationWidget close={()=>setOpenMeditation(false)} />}\n      {openPomodoro && <PomodoroWidget close={()=>setOpenPomodoro(false)} />}\n      {openQuotes && <QuotesWidget close={()=>setOpenQuotes(false)} />}\n      {openToDo && <ToDoWidget close={()=>setOpenToDo(false)} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}